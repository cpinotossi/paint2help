{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "connections_azureblob_name": {
            "defaultValue": "azureblob",
            "type": "String"
        },
        "workflows_testvideoapp_name": {
            "defaultValue": "testvideoapp",
            "type": "String"
        },
        "connections_documentdb_1_name": {
            "defaultValue": "documentdb-1",
            "type": "String"
        },
        "workflows_videoextractapp_name": {
            "defaultValue": "videoextractapp",
            "type": "String"
        },
        "connections_videoindexer_v2_name": {
            "defaultValue": "videoindexer-v2",
            "type": "String"
        },
        "databaseAccounts_videoinventory_name": {
            "defaultValue": "videoinventory",
            "type": "String"
        },
        "mediaservices_videoindexeramsea7263f6_name": {
            "defaultValue": "videoindexeramsea7263f6",
            "type": "String"
        },
        "storageAccounts_videoindexersaea7263f6_name": {
            "defaultValue": "videoindexersaea7263f6",
            "type": "String"
        },
        "workspaces_testbildlivetv_law_name": {
            "defaultValue": "testbildlivetv-law",
            "type": "String"
        },
        "systemTopics_videoindexeramsea7263f6_446496fa_fbad_46bd_9fb1_25618073c546_name": {
            "defaultValue": "videoindexeramsea7263f6-446496fa-fbad-46bd-9fb1-25618073c546",
            "type": "String"
        }
    },
    "variables": {},
    "resources": [
        {
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "apiVersion": "2020-09-01",
            "name": "[parameters('databaseAccounts_videoinventory_name')]",
            "location": "South Central US",
            "tags": {
                "defaultExperience": "Core (SQL)",
                "hidden-cosmos-mmspecial": "",
                "CosmosAccountType": "Non-Production"
            },
            "kind": "GlobalDocumentDB",
            "properties": {
                "publicNetworkAccess": "Enabled",
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": false,
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [],
                "disableKeyBasedMetadataWriteAccess": false,
                "enableFreeTier": false,
                "enableAnalyticalStorage": false,
                "databaseAccountOfferType": "Standard",
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "Session",
                    "maxIntervalInSeconds": 5,
                    "maxStalenessPrefix": 100
                },
                "locations": [
                    {
                        "locationName": "South Central US",
                        "provisioningState": "Succeeded",
                        "failoverPriority": 0,
                        "isZoneRedundant": false
                    }
                ],
                "cors": [],
                "capabilities": [],
                "ipRules": [],
                "backupPolicy": {
                    "type": "Periodic",
                    "periodicModeProperties": {
                        "backupIntervalInMinutes": 240,
                        "backupRetentionIntervalInHours": 8
                    }
                }
            }
        },
        {
            "type": "microsoft.operationalinsights/workspaces",
            "apiVersion": "2020-10-01",
            "name": "[parameters('workspaces_testbildlivetv_law_name')]",
            "location": "southcentralus",
            "properties": {
                "provisioningState": "Succeeded",
                "sku": {
                    "name": "pergb2018"
                },
                "retentionInDays": 30,
                "workspaceCapping": {
                    "dailyQuotaGb": -1
                },
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2020-08-01-preview",
            "name": "[parameters('storageAccounts_videoindexersaea7263f6_name')]",
            "location": "southcentralus",
            "sku": {
                "name": "Standard_GRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": false,
                "encryption": {
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[parameters('connections_azureblob_name')]",
            "location": "southcentralus",
            "kind": "V1",
            "properties": {
                "displayName": "AzureBlobStorage",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/186a0067-eaf3-40f4-8be0-b1a211841a49/providers/Microsoft.Web/locations/southcentralus/managedApis/', parameters('connections_azureblob_name'))]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[parameters('connections_documentdb_1_name')]",
            "location": "southcentralus",
            "kind": "V1",
            "properties": {
                "displayName": "Video Inventory",
                "customParameterValues": {},
                "api": {
                    "id": "/subscriptions/186a0067-eaf3-40f4-8be0-b1a211841a49/providers/Microsoft.Web/locations/southcentralus/managedApis/documentdb"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[parameters('connections_videoindexer_v2_name')]",
            "location": "southcentralus",
            "kind": "V1",
            "properties": {
                "displayName": "VIConnect",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/186a0067-eaf3-40f4-8be0-b1a211841a49/providers/Microsoft.Web/locations/southcentralus/managedApis/', parameters('connections_videoindexer_v2_name'))]"
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/notebookWorkspaces",
            "apiVersion": "2020-09-01",
            "name": "[concat(parameters('databaseAccounts_videoinventory_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccounts_videoinventory_name'))]"
            ]
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
            "apiVersion": "2020-09-01",
            "name": "[concat(parameters('databaseAccounts_videoinventory_name'), '/', parameters('databaseAccounts_videoinventory_name'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccounts_videoinventory_name'))]"
            ],
            "properties": {
                "resource": {
                    "id": "videoinventory"
                }
            }
        },
        {
            "type": "Microsoft.EventGrid/systemTopics",
            "apiVersion": "2020-10-15-preview",
            "name": "[parameters('systemTopics_videoindexeramsea7263f6_446496fa_fbad_46bd_9fb1_25618073c546_name')]",
            "location": "southcentralus",
            "dependsOn": [
                "[resourceId('Microsoft.Media/mediaservices', parameters('mediaservices_videoindexeramsea7263f6_name'))]"
            ],
            "properties": {
                "source": "[resourceId('Microsoft.Media/mediaservices', parameters('mediaservices_videoindexeramsea7263f6_name'))]",
                "topicType": "microsoft.media.mediaservices"
            }
        },
        {
            "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
            "apiVersion": "2020-10-15-preview",
            "name": "[concat(parameters('systemTopics_videoindexeramsea7263f6_446496fa_fbad_46bd_9fb1_25618073c546_name'), '/VideoIndexerAmsNotifications')]",
            "dependsOn": [
                "[resourceId('Microsoft.EventGrid/systemTopics', parameters('systemTopics_videoindexeramsea7263f6_446496fa_fbad_46bd_9fb1_25618073c546_name'))]"
            ],
            "properties": {
                "destination": {
                    "properties": {
                        "maxEventsPerBatch": 1,
                        "preferredBatchSizeInKilobytes": 64
                    },
                    "endpointType": "WebHook"
                },
                "filter": {
                    "includedEventTypes": [
                        "Microsoft.Media.JobStateChange",
                        "Microsoft.Media.JobScheduled",
                        "Microsoft.Media.JobProcessing",
                        "Microsoft.Media.JobCanceling",
                        "Microsoft.Media.JobFinished",
                        "Microsoft.Media.JobCanceled",
                        "Microsoft.Media.JobErrored",
                        "Microsoft.Media.JobOutputStateChange",
                        "Microsoft.Media.JobOutputScheduled",
                        "Microsoft.Media.JobOutputProcessing",
                        "Microsoft.Media.JobOutputCanceling",
                        "Microsoft.Media.JobOutputFinished",
                        "Microsoft.Media.JobOutputCanceled",
                        "Microsoft.Media.JobOutputErrored",
                        "Microsoft.Media.LiveEventEncoderConnected",
                        "Microsoft.Media.LiveEventIncomingStreamReceived",
                        "Microsoft.Media.LiveEventEncoderDisconnected",
                        "Microsoft.Media.LiveEventConnectionRejected",
                        "Microsoft.Media.LiveEventTrackDiscontinuityDetected",
                        "Microsoft.Media.LiveEventIncomingVideoStreamsOutOfSync",
                        "Microsoft.Media.LiveEventIncomingDataChunkDropped",
                        "Microsoft.Media.LiveEventIncomingStreamsOutOfSync",
                        "Microsoft.Media.LiveEventIngestHeartbeat",
                        "Microsoft.Media.JobOutputProgress"
                    ]
                },
                "eventDeliverySchema": "EventGridSchema",
                "retryPolicy": {
                    "maxDeliveryAttempts": 30,
                    "eventTimeToLiveInMinutes": 1440
                }
            }
        },
        {
            "type": "Microsoft.Media/mediaservices",
            "apiVersion": "2015-10-01",
            "name": "[parameters('mediaservices_videoindexeramsea7263f6_name')]",
            "location": "South Central US",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_videoindexersaea7263f6_name'))]"
            ],
            "properties": {
                "storageAccounts": [
                    {
                        "id": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_videoindexersaea7263f6_name'))]",
                        "isPrimary": true
                    }
                ]
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_General|AlphabeticallySortedComputers')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "All Computers with their most recent data",
                "Category": "General Exploration",
                "Query": "search not(ObjectName == \"Advisor Metrics\" or ObjectName == \"ManagedSpace\") | summarize AggregatedValue = max(TimeGenerated) by Computer | limit 500000 | sort by Computer asc\r\n// Oql: NOT(ObjectName=\"Advisor Metrics\" OR ObjectName=ManagedSpace) | measure max(TimeGenerated) by Computer | top 500000 | Sort Computer // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_General|dataPointsPerManagementGroup')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Which Management Group is generating the most data points?",
                "Category": "General Exploration",
                "Query": "search * | summarize AggregatedValue = count() by ManagementGroupName\r\n// Oql: * | Measure count() by ManagementGroupName // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_General|dataTypeDistribution')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Distribution of data Types",
                "Category": "General Exploration",
                "Query": "search * | extend Type = $table | summarize AggregatedValue = count() by Type\r\n// Oql: * | Measure count() by Type // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_General|StaleComputers')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Stale Computers (data older than 24 hours)",
                "Category": "General Exploration",
                "Query": "search not(ObjectName == \"Advisor Metrics\" or ObjectName == \"ManagedSpace\") | summarize lastdata = max(TimeGenerated) by Computer | limit 500000 | where lastdata < ago(24h)\r\n// Oql: NOT(ObjectName=\"Advisor Metrics\" OR ObjectName=ManagedSpace) | measure max(TimeGenerated) as lastdata by Computer | top 500000 | where lastdata < NOW-24HOURS // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|AllEvents')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "All Events",
                "Category": "Log Management",
                "Query": "Event | sort by TimeGenerated desc\r\n// Oql: Type=Event // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|AllSyslog')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "All Syslogs",
                "Category": "Log Management",
                "Query": "Syslog | sort by TimeGenerated desc\r\n// Oql: Type=Syslog // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|AllSyslogByFacility')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "All Syslog Records grouped by Facility",
                "Category": "Log Management",
                "Query": "Syslog | summarize AggregatedValue = count() by Facility\r\n// Oql: Type=Syslog | Measure count() by Facility // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|AllSyslogByProcessName')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "All Syslog Records grouped by ProcessName",
                "Category": "Log Management",
                "Query": "Syslog | summarize AggregatedValue = count() by ProcessName\r\n// Oql: Type=Syslog | Measure count() by ProcessName // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|AllSyslogsWithErrors')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "All Syslog Records with Errors",
                "Category": "Log Management",
                "Query": "Syslog | where SeverityLevel == \"error\" | sort by TimeGenerated desc\r\n// Oql: Type=Syslog SeverityLevel=error // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|AverageHTTPRequestTimeByClientIPAddress')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Average HTTP Request time by Client IP Address",
                "Category": "Log Management",
                "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = avg(TimeTaken) by cIP\r\n// Oql: Type=W3CIISLog | Measure Avg(TimeTaken) by cIP // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|AverageHTTPRequestTimeHTTPMethod')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Average HTTP Request time by HTTP Method",
                "Category": "Log Management",
                "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = avg(TimeTaken) by csMethod\r\n// Oql: Type=W3CIISLog | Measure Avg(TimeTaken) by csMethod // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|CountIISLogEntriesClientIPAddress')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Count of IIS Log Entries by Client IP Address",
                "Category": "Log Management",
                "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by cIP\r\n// Oql: Type=W3CIISLog | Measure count() by cIP // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|CountIISLogEntriesHTTPRequestMethod')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Count of IIS Log Entries by HTTP Request Method",
                "Category": "Log Management",
                "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csMethod\r\n// Oql: Type=W3CIISLog | Measure count() by csMethod // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|CountIISLogEntriesHTTPUserAgent')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Count of IIS Log Entries by HTTP User Agent",
                "Category": "Log Management",
                "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csUserAgent\r\n// Oql: Type=W3CIISLog | Measure count() by csUserAgent // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|CountOfIISLogEntriesByHostRequestedByClient')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Count of IIS Log Entries by Host requested by client",
                "Category": "Log Management",
                "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csHost\r\n// Oql: Type=W3CIISLog | Measure count() by csHost // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|CountOfIISLogEntriesByURLForHost')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Count of IIS Log Entries by URL for the host \"www.contoso.com\" (replace with your own)",
                "Category": "Log Management",
                "Query": "search csHost == \"www.contoso.com\" | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csUriStem\r\n// Oql: Type=W3CIISLog csHost=\"www.contoso.com\" | Measure count() by csUriStem // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|CountOfIISLogEntriesByURLRequestedByClient')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Count of IIS Log Entries by URL requested by client (without query strings)",
                "Category": "Log Management",
                "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csUriStem\r\n// Oql: Type=W3CIISLog | Measure count() by csUriStem // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|CountOfWarningEvents')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Count of Events with level \"Warning\" grouped by Event ID",
                "Category": "Log Management",
                "Query": "Event | where EventLevelName == \"warning\" | summarize AggregatedValue = count() by EventID\r\n// Oql: Type=Event EventLevelName=warning | Measure count() by EventID // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|DisplayBreakdownRespondCodes')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Shows breakdown of response codes",
                "Category": "Log Management",
                "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by scStatus\r\n// Oql: Type=W3CIISLog | Measure count() by scStatus // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|EventsByEventLog')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Count of Events grouped by Event Log",
                "Category": "Log Management",
                "Query": "Event | summarize AggregatedValue = count() by EventLog\r\n// Oql: Type=Event | Measure count() by EventLog // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|EventsByEventsID')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Count of Events grouped by Event ID",
                "Category": "Log Management",
                "Query": "Event | summarize AggregatedValue = count() by EventID\r\n// Oql: Type=Event | Measure count() by EventID // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|EventsByEventSource')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Count of Events grouped by Event Source",
                "Category": "Log Management",
                "Query": "Event | summarize AggregatedValue = count() by Source\r\n// Oql: Type=Event | Measure count() by Source // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|EventsInOMBetween2000to3000')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Events in the Operations Manager Event Log whose Event ID is in the range between 2000 and 3000",
                "Category": "Log Management",
                "Query": "Event | where EventLog == \"Operations Manager\" and EventID >= 2000 and EventID <= 3000 | sort by TimeGenerated desc\r\n// Oql: Type=Event EventLog=\"Operations Manager\" EventID:[2000..3000] // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|EventsWithStartedinEventID')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Count of Events containing the word \"started\" grouped by EventID",
                "Category": "Log Management",
                "Query": "search in (Event) \"started\" | summarize AggregatedValue = count() by EventID\r\n// Oql: Type=Event \"started\" | Measure count() by EventID // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|FindMaximumTimeTakenForEachPage')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Find the maximum time taken for each page",
                "Category": "Log Management",
                "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = max(TimeTaken) by csUriStem\r\n// Oql: Type=W3CIISLog | Measure Max(TimeTaken) by csUriStem // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|IISLogEntriesForClientIP')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "IIS Log Entries for a specific client IP Address (replace with your own)",
                "Category": "Log Management",
                "Query": "search cIP == \"192.168.0.1\" | extend Type = $table | where Type == W3CIISLog | sort by TimeGenerated desc | project csUriStem, scBytes, csBytes, TimeTaken, scStatus\r\n// Oql: Type=W3CIISLog cIP=\"192.168.0.1\" | Select csUriStem,scBytes,csBytes,TimeTaken,scStatus // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|ListAllIISLogEntries')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "All IIS Log Entries",
                "Category": "Log Management",
                "Query": "search * | extend Type = $table | where Type == W3CIISLog | sort by TimeGenerated desc\r\n// Oql: Type=W3CIISLog // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|NoOfConnectionsToOMSDKService')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "How many connections to Operations Manager's SDK service by day",
                "Category": "Log Management",
                "Query": "Event | where EventID == 26328 and EventLog == \"Operations Manager\" | summarize AggregatedValue = count() by bin(TimeGenerated, 1d) | sort by TimeGenerated desc\r\n// Oql: Type=Event EventID=26328 EventLog=\"Operations Manager\" | Measure count() interval 1DAY // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|ServerRestartTime')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "When did my servers initiate restart?",
                "Category": "Log Management",
                "Query": "search in (Event) \"shutdown\" and EventLog == \"System\" and Source == \"User32\" and EventID == 1074 | sort by TimeGenerated desc | project TimeGenerated, Computer\r\n// Oql: shutdown Type=Event EventLog=System Source=User32 EventID=1074 | Select TimeGenerated,Computer // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|Show404PagesList')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Shows which pages people are getting a 404 for",
                "Category": "Log Management",
                "Query": "search scStatus == 404 | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csUriStem\r\n// Oql: Type=W3CIISLog scStatus=404 | Measure count() by csUriStem // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|ShowServersThrowingInternalServerError')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Shows servers that are throwing internal server error",
                "Category": "Log Management",
                "Query": "search scStatus == 500 | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by sComputerName\r\n// Oql: Type=W3CIISLog scStatus=500 | Measure count() by sComputerName // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|TotalBytesReceivedByEachAzureRoleInstance')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Total Bytes received by each Azure Role Instance",
                "Category": "Log Management",
                "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = sum(csBytes) by RoleInstance\r\n// Oql: Type=W3CIISLog | Measure Sum(csBytes) by RoleInstance // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|TotalBytesReceivedByEachIISComputer')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Total Bytes received by each IIS Computer",
                "Category": "Log Management",
                "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = sum(csBytes) by Computer | limit 500000\r\n// Oql: Type=W3CIISLog | Measure Sum(csBytes) by Computer | top 500000 // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|TotalBytesRespondedToClientsByClientIPAddress')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Total Bytes responded back to clients by Client IP Address",
                "Category": "Log Management",
                "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = sum(scBytes) by cIP\r\n// Oql: Type=W3CIISLog | Measure Sum(scBytes) by cIP // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|TotalBytesRespondedToClientsByEachIISServerIPAddress')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Total Bytes responded back to clients by each IIS ServerIP Address",
                "Category": "Log Management",
                "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = sum(scBytes) by sIP\r\n// Oql: Type=W3CIISLog | Measure Sum(scBytes) by sIP // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|TotalBytesSentByClientIPAddress')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Total Bytes sent by Client IP Address",
                "Category": "Log Management",
                "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = sum(csBytes) by cIP\r\n// Oql: Type=W3CIISLog | Measure Sum(csBytes) by cIP // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|WarningEvents')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "All Events with level \"Warning\"",
                "Category": "Log Management",
                "Query": "Event | where EventLevelName == \"warning\" | sort by TimeGenerated desc\r\n// Oql: Type=Event EventLevelName=warning // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|WindowsFireawallPolicySettingsChanged')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "Windows Firewall Policy settings have changed",
                "Category": "Log Management",
                "Query": "Event | where EventLog == \"Microsoft-Windows-Windows Firewall With Advanced Security/Firewall\" and EventID == 2008 | sort by TimeGenerated desc\r\n// Oql: Type=Event EventLog=\"Microsoft-Windows-Windows Firewall With Advanced Security/Firewall\" EventID=2008 // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspaces_testbildlivetv_law_name'), '/LogManagement(', parameters('workspaces_testbildlivetv_law_name'), ')_LogManagement|WindowsFireawallPolicySettingsChangedByMachines')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaces_testbildlivetv_law_name'))]"
            ],
            "properties": {
                "DisplayName": "On which machines and how many times have Windows Firewall Policy settings changed",
                "Category": "Log Management",
                "Query": "Event | where EventLog == \"Microsoft-Windows-Windows Firewall With Advanced Security/Firewall\" and EventID == 2008 | summarize AggregatedValue = count() by Computer | limit 500000\r\n// Oql: Type=Event EventLog=\"Microsoft-Windows-Windows Firewall With Advanced Security/Firewall\" EventID=2008 | measure count() by Computer | top 500000 // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
                "Version": 2
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(parameters('storageAccounts_videoindexersaea7263f6_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_videoindexersaea7263f6_name'))]"
            ],
            "sku": {
                "name": "Standard_GRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "enabled": false
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(parameters('storageAccounts_videoindexersaea7263f6_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_videoindexersaea7263f6_name'))]"
            ],
            "sku": {
                "name": "Standard_GRS",
                "tier": "Standard"
            },
            "properties": {
                "protocolSettings": {
                    "smb": {}
                },
                "cors": {
                    "corsRules": []
                },
                "shareDeleteRetentionPolicy": {
                    "enabled": true,
                    "days": 7
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/queueServices",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(parameters('storageAccounts_videoindexersaea7263f6_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_videoindexersaea7263f6_name'))]"
            ],
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/tableServices",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(parameters('storageAccounts_videoindexersaea7263f6_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_videoindexersaea7263f6_name'))]"
            ],
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "apiVersion": "2020-09-01",
            "name": "[concat(parameters('databaseAccounts_videoinventory_name'), '/', parameters('databaseAccounts_videoinventory_name'), '/inventory001')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccounts_videoinventory_name'), parameters('databaseAccounts_videoinventory_name'))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccounts_videoinventory_name'))]"
            ],
            "properties": {
                "resource": {
                    "id": "inventory001",
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "automatic": true,
                        "includedPaths": [
                            {
                                "path": "/*"
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    },
                    "partitionKey": {
                        "paths": [
                            "/id"
                        ],
                        "kind": "Hash"
                    },
                    "uniqueKeyPolicy": {
                        "uniqueKeys": []
                    },
                    "conflictResolutionPolicy": {
                        "mode": "LastWriterWins",
                        "conflictResolutionPath": "/_ts"
                    }
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/throughputSettings",
            "apiVersion": "2020-09-01",
            "name": "[concat(parameters('databaseAccounts_videoinventory_name'), '/', parameters('databaseAccounts_videoinventory_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccounts_videoinventory_name'), parameters('databaseAccounts_videoinventory_name'))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccounts_videoinventory_name'))]"
            ],
            "properties": {
                "resource": {
                    "throughput": 400,
                    "autoscaleSettings": {
                        "maxThroughput": 4000
                    }
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('workflows_testvideoapp_name')]",
            "location": "southcentralus",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', parameters('connections_azureblob_name'))]",
                "[resourceId('Microsoft.Web/connections', parameters('connections_videoindexer_v2_name'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "When_a_blob_is_added_or_modified_(properties_only)": {
                            "recurrence": {
                                "frequency": "Minute",
                                "interval": 5
                            },
                            "splitOn": "@triggerBody()",
                            "metadata": {
                                "JTJmdmlkZW9hc3NldHM=": "/videoassets"
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/datasets/default/triggers/batch/onupdatedfile",
                                "queries": {
                                    "checkBothCreatedAndModifiedDateTime": false,
                                    "folderId": "JTJmdmlkZW9hc3NldHM=",
                                    "maxFileCount": 10
                                }
                            }
                        }
                    },
                    "actions": {
                        "Create_SAS_URI_by_path": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "AccessProtocol": "HttpsOnly",
                                    "Permissions": "Read"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/default/CreateSharedLinkByPath",
                                "queries": {
                                    "path": "@triggerBody()?['Path']"
                                }
                            }
                        },
                        "Get_Account_Access_Token": {
                            "runAfter": {
                                "Create_SAS_URI_by_path": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['videoindexer-v2']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/auth/@{encodeURIComponent('southcentralus')}/Accounts/@{encodeURIComponent('434e5663-6c58-43d8-8143-9c3cac634594')}/AccessToken",
                                "queries": {
                                    "allowEdit": true
                                }
                            }
                        },
                        "Upload_video_and_index": {
                            "runAfter": {
                                "Get_Account_Access_Token": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['videoindexer-v2']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/@{encodeURIComponent('southcentralus')}/Accounts/@{encodeURIComponent('434e5663-6c58-43d8-8143-9c3cac634594')}/Videos",
                                "queries": {
                                    "accessToken": "@body('Get_Account_Access_Token')",
                                    "callbackUrl": "https://prod-27.southcentralus.logic.azure.com:443/workflows/2125817c17984d399e9ae9cde5a15036/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=NRuAz0mLHqOI_lKQOMypG-GymPZlRyQNh4j2K8wV2JQ",
                                    "language": "Auto",
                                    "name": "@triggerBody()?['Path']",
                                    "videoUrl": "@body('Create_SAS_URI_by_path')?['WebUrl']"
                                }
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('connections_azureblob_name'))]",
                                "connectionName": "azureblob",
                                "id": "/subscriptions/186a0067-eaf3-40f4-8be0-b1a211841a49/providers/Microsoft.Web/locations/southcentralus/managedApis/azureblob"
                            },
                            "videoindexer-v2": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('connections_videoindexer_v2_name'))]",
                                "connectionName": "videoindexer-v2",
                                "id": "/subscriptions/186a0067-eaf3-40f4-8be0-b1a211841a49/providers/Microsoft.Web/locations/southcentralus/managedApis/videoindexer-v2"
                            }
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('workflows_videoextractapp_name')]",
            "location": "southcentralus",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', parameters('connections_documentdb_1_name'))]",
                "[resourceId('Microsoft.Web/connections', parameters('connections_videoindexer_v2_name'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {}
                        }
                    },
                    "actions": {
                        "Create_or_update_document_(V2)": {
                            "runAfter": {
                                "Get_Video_Index": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@body('Get_Video_Index')",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['documentdb']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/v3/dbs/@{encodeURIComponent('videoinventory')}/colls/@{encodeURIComponent('inventory001')}/docs"
                            }
                        },
                        "Get_Account_Access_Token": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['videoindexer-v2']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/auth/@{encodeURIComponent('southcentralus')}/Accounts/@{encodeURIComponent('434e5663-6c58-43d8-8143-9c3cac634594')}/AccessToken",
                                "queries": {
                                    "allowEdit": true
                                }
                            }
                        },
                        "Get_Video_Index": {
                            "runAfter": {
                                "Get_Account_Access_Token": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['videoindexer-v2']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/@{encodeURIComponent('southcentralus')}/Accounts/@{encodeURIComponent('434e5663-6c58-43d8-8143-9c3cac634594')}/Videos/@{encodeURIComponent(triggerOutputs()['queries']['id'])}/Index",
                                "queries": {
                                    "accessToken": "@body('Get_Account_Access_Token')",
                                    "language": "German"
                                }
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "documentdb": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('connections_documentdb_1_name'))]",
                                "connectionName": "documentdb-1",
                                "id": "/subscriptions/186a0067-eaf3-40f4-8be0-b1a211841a49/providers/Microsoft.Web/locations/southcentralus/managedApis/documentdb"
                            },
                            "videoindexer-v2": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('connections_videoindexer_v2_name'))]",
                                "connectionName": "videoindexer-v2",
                                "id": "/subscriptions/186a0067-eaf3-40f4-8be0-b1a211841a49/providers/Microsoft.Web/locations/southcentralus/managedApis/videoindexer-v2"
                            }
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(parameters('storageAccounts_videoindexersaea7263f6_name'), '/default/asset-0b0599b8-a95e-4d78-9309-dbcf3e828370')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_videoindexersaea7263f6_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_videoindexersaea7263f6_name'))]"
            ],
            "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(parameters('storageAccounts_videoindexersaea7263f6_name'), '/default/asset-8b46988b-d514-4ce5-98ea-04a820d83202')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_videoindexersaea7263f6_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_videoindexersaea7263f6_name'))]"
            ],
            "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(parameters('storageAccounts_videoindexersaea7263f6_name'), '/default/asset-8bf37776-1f69-4329-91f2-353f4950c213')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_videoindexersaea7263f6_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_videoindexersaea7263f6_name'))]"
            ],
            "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(parameters('storageAccounts_videoindexersaea7263f6_name'), '/default/inventory')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_videoindexersaea7263f6_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_videoindexersaea7263f6_name'))]"
            ],
            "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(parameters('storageAccounts_videoindexersaea7263f6_name'), '/default/videoassets')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_videoindexersaea7263f6_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_videoindexersaea7263f6_name'))]"
            ],
            "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        }
    ]
}